Basic Tutorial
==============

We provide here an example of how to utilize WatCon for new users. In this case, we will use WatCon to analyze conserved water molecules within the PTP1B active site, compare water networks across different PTP1B structures, and quantify conservation of these networks. For the sake of simplicity, this tutorial only uses static crystal structures. Further details on implementation of dynamic structures is available in the :doc:`User Guide <user_guide>`.


Preparing Structures
--------------------

We first obtain a series of PDB structures directly from the PDB databank. In this case, we will obtain crystal structures of PTP1B only in the closed WPD-loop position. This accounts to 69 structures.


We note that the higher resolution of a crystal structure, the more water molecules it is likely to have. Therefore, ideally we desire crystal structures with as good of a resolution as possible for our water network analysis.


1. Clean Raw PDBs
~~~~~~~~~~~~~~~~~

We first clean our PDBs by using the AmberTools ``pdb4amber`` function. Although not explicitly necessary, this tool easily rewrites our PDBs in Modeller-readable format for structural alignment. We can implement a simple bash script to process these files. This script assumes that you have kept all PDB files in a directory titled **pdbs** and then moves all of the cleaned files to the **clean_pdbs** directory.

.. code-block:: bash

    #!/bin/bash
    
    mkdir clean_pdbs
    files=$(ls pdbs)
    
    for file in $files; do
        name=$(basename "$file" .pdb)
        pdb4amber -i "pdbs/$file" -o "${name}.amber.pdb"
    done
    
    #Remove unused files
    rm *sslink* *nonprot* *renum*
    
    mv *amber* clean_pdbs


2. Create Fasta Files
~~~~~~~~~~~~~~~~~~~~~

To perform structural and sequence alignments, fasta files need to be obtained for all proteins. This can be done in any manner, but we recommend using the built in functions in the :mod:`WatCon.sequence_processing` module to create fasta files directly from the **clean_pdbs** directory. 


.. code-block:: python

    import os, sys
    from WatCon.sequence_processing import pdb_to_fastas

    fasta_out = 'fasta'
    for file in os.listdir('clean_pdbs'):
        name = file.split('.')[0]
        pdb_to_fastas(os.path.join('clean_pdbs', file), fasta_out, name)
    
    os.chdir(fasta_out)

    #Concatenate all fastas 
    os.system('for f in *.fa; do (cat "${f}"; echo) >> ../all_fastas.fa; done')


3. Align PDBs
~~~~~~~~~~~~~

Since WatCon partially relies on cartesian positions of water molecules, all structures of interest should be aligned before creating networks. There are instances in which this is not always true, see :doc:`User Guide <user_guide>` for more details. To do this, we will use Modeller to align all structures and save these structures in the **aligned_pdbs** directory. This process saves PDB structures with no waters (not useful!), and so we will then take the translation and rotation matrices calculated from our alignments to align the entire system including waters and save those files to the **aligned_with_waters** directory. 


.. code-block:: python

   from WatCon.sequence_processing import perform_structure_alignment, align_with_waters

   rotation_info = perform_structure_alignment('clean_pdbs')
   align_with_waters('clean_pdbs', rotation_info['Rot'], rotation_info['Trans'], out_dir='aligned_with_waters')


4. Create Multiple Sequence Alignment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A multiple sequence alignment can either be generated by inputting the ``all_fastas.fa`` file into the `CLUSTAL webserver <https://www.ebi.ac.uk/jdispatcher/msa/muscle?stype=protein>`_ (and converting the output to PIR format) or by using the built-in alignment from WatCon.

.. code-block:: python

   from WatCon.sequence_processing import msa_with_modeller

   msa_with_modeller('alignment.txt', 'all_fastas.fa')


5. Run WatCon
~~~~~~~~~~~~~

Now that we have prepared our structures, we can run WatCon. The easiest way to do this is via the use of input files. An example input file is provided in the :doc:`Getting Started <getting_started>` section, and further details are provided in the :doc:`User Guide <user_guide>`. 


WatCon can then be called on the command line:

 .. code-block:: console

   $ python -m WatCon.WatCon --input input_file.txt --name PTP1B_closed



